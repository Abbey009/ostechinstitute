'use client';import { useParams, useRouter } from 'next/navigation';import { useEffect, useState } from 'react';import { doc, getDoc, setDoc, serverTimestamp } from 'firebase/firestore';import { db } from '@/lib/firebase/firebaseConfig';import { useAuth } from '@/context/AuthContext';import { ClipLoader } from 'react-spinners';import toast from 'react-hot-toast';
interface Course {  title: string;  price: number;}
export default function PaymentPage() {  const { id } = useParams();  const router = useRouter();  const { user } = useAuth();  const [course, setCourse] = useState<Course | null>(null);  const [loading, setLoading] = useState(true);  const [processing, setProcessing] = useState(false);  const [selectedMethod, setSelectedMethod] = useState<'online' | 'bank'>('online');
  useEffect(() => {    const fetchCourse = async () => {      if (!id) return;      try {        const courseRef = doc(db, 'courses', id as string);        const courseSnap = await getDoc(courseRef);        if (courseSnap.exists()) {          setCourse(courseSnap.data() as Course);        } else {          toast.error('Course not found');        }      } catch (error) {        toast.error('Failed to fetch course');      } finally {        setLoading(false);      }    };    fetchCourse();  }, [id]);
  const handleOnlinePayment = async () => {    if (!user || !course) return toast.error('User or course info missing');    const paystack = (window as any).PaystackPop;    if (!paystack) return toast.error('Paystack not available');
    const reference = `REF-${Date.now()}-${user.uid}`;
    // Record payment initiation before opening Paystack    try {      await setDoc(doc(db, 'payments', reference), {        userId: user.uid,        courseId: id,        method: 'paystack',        status: 'initiated',        reference,        timestamp: serverTimestamp(),      });    } catch (error) {      return toast.error('Failed to initiate payment');    }
    const handler = paystack.setup({      key: process.env.NEXT_PUBLIC_PAYSTACK_KEY,      email: user.email,      amount: course.price * 100,      currency: 'NGN',      reference,      metadata: {        custom_fields: [          { display_name: 'User ID', variable_name: 'user_id', value: user.uid },          { display_name: 'Course ID', variable_name: 'course_id', value: id },        ],      },      callback: async (response: any) => {        setProcessing(true);        try {          await setDoc(doc(db, 'payments', reference), {            userId: user.uid,            courseId: id,            method: 'paystack',            status: 'pending',            reference: response.reference,            timestamp: serverTimestamp(),          });          toast.success('Payment submitted. You’ll be enrolled after confirmation.');          router.push('/dashboard');        } catch (error) {          toast.error('Failed to record payment confirmation');        } finally {          setProcessing(false);        }      },      onClose: () => toast('Payment window closed.'),    });
    handler.openIframe();  };
  const handleDirectTransfer = async () => {    if (!user || !id) return toast.error('Missing user or course ID');    try {      setProcessing(true);      await setDoc(doc(db, 'payments', `${user.uid}_${id}`), {        userId: user.uid,        courseId: id,        method: 'bank',        status: 'pending',        timestamp: serverTimestamp(),      });      toast.success('Transfer info submitted. Admin will verify and enroll you.');      router.push('/');    } catch (error) {      toast.error('Failed to record transfer');    } finally {      setProcessing(false);    }  };
  if (loading) {    return (      <div className="flex justify-center items-center h-60">        <ClipLoader size={35} color="#2563eb" />      </div>    );  }
  if (!course) return <p className="text-center text-gray-600">Course not found.</p>;
  return (    <div className="max-w-2xl mx-auto p-6 bg-gray-50 rounded-xl shadow-md">      <h1 className="text-2xl font-bold mb-4 text-gray-800">Checkout: {course.title}</h1>
      <div className="mb-6 flex space-x-4">        {['online', 'bank'].map((method) => (          <button            key={method}            type="button"            onClick={() => setSelectedMethod(method as 'online' | 'bank')}            className={`px-4 py-2 rounded-xl border transition ${              selectedMethod === method                ? 'bg-blue-600 text-white border-blue-600'                : 'bg-white text-gray-800 border-gray-300'            }`}          >            {method === 'online' ? 'Pay Online' : 'Direct Bank Transfer'}          </button>        ))}      </div>
      {selectedMethod === 'online' && (        <div className="bg-white p-6 rounded-xl space-y-4 border">          <p className="text-gray-700 text-lg">            <strong>Price:</strong> ₦{course.price?.toLocaleString() || 'Free'}          </p>          <p className="text-gray-600 text-sm">            Secure payment to unlock full access, project, and certificate.          </p>          <button            type="button"            onClick={handleOnlinePayment}            disabled={processing}            className="w-full bg-green-600 hover:bg-green-700 text-white py-2 rounded-xl text-lg transition disabled:opacity-50"          >            {processing ? 'Processing...' : 'Proceed to Pay'}          </button>        </div>      )}
      {selectedMethod === 'bank' && (        <div className="bg-white p-6 rounded-xl space-y-4 border">          <p className="text-gray-700 text-lg">Transfer to the following account:</p>          <div className="bg-gray-100 p-4 rounded-xl text-sm">            <p><strong>Bank:</strong> XYZ Bank</p>            <p><strong>Account Name:</strong> OsTech Institute</p>            <p><strong>Account Number:</strong> 1234567890</p>          </div>          <p className="text-gray-600 text-sm">            After transfer, click below. Admin will verify and enroll you.          </p>          <button            type="button"            onClick={handleDirectTransfer}            disabled={processing}            className="w-full bg-yellow-600 hover:bg-yellow-700 text-white py-2 rounded-xl text-lg transition disabled:opacity-50"          >            {processing ? 'Submitting...' : 'I’ve Transferred - Mark as Paid'}          </button>        </div>      )}    </div>  );}
